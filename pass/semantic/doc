========================================================================================================================

== Semantic Pass Function Descriptions ==

========================================================================================================================

== Type Check Functions ==

is_primitive_op()
* Parameters: LNAST Node Type
* Return value: boolean
* Returns true if LNAST Node is a primitive type (e.g. logical, unary, nary operation). Otherwise, returns false.

is_tree_structs()
* Parameters: LNAST Node Type
* Return value: boolean
* Returns true if LNAST Node is a Tree Structure type (e.g. if, for, conditional statement). Otherwise, returns false.

is_temp_var()
* Parameters: LNAST Node Type
* Return value: boolean
* Returns true if LNAST Node is a temporary variable denoted by 3 underscores ('____'). Otherwise, returns false.

is_a_number()
* Parameters: LNAST Node Name
* Return value: boolean
* Returns true if LNAST Node name is an integer. Otherwise, returns false.

========================================================================================================================

== Existence Check Functions ==

Notes:
FlatHashMap write_list --> Holds written-to-variables as keys and statement node names they belong to as values
FlatHashMap read_list  --> Holds read-from-variables as keys and statement node names they belong to as values

in_write_list()
* Parameters: FlatHashMap, LNAST Node Name, LNAST Statement Name (the statement it belongs to)
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_read_list()
* Parameters: FlatHashMap, LNAST Node Name, LNAST Statement Name (the statement it belongs to)
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_inefficient_LNAST()
* Parameters: LNAST Node Name
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_output_vars()
* Parameters: LNAST Node Name
* Return value: boolean
* Returns true if LNAST Node Name exists in the FlatHashMap. Otherwise, returns false

in_lhs_list()
* Parameters: LNAST Class, Index n (integer)
* Return value: std::string_view
* Returns LNAST Node Name at Index n if it exists. Otherwise return an empty std::string_view

in_rhs_list()
* Parameters: LNAST Class, LNAST Node Name, Index n (integer)
* Return value: integer
* Returns integer of the index where Node Name is located when starting search from 0 or from n

in_in_scope_stack()
* Paremeter: LNAST Node Name
* Return value: boolean
* Returns true of LNAST Node Name exists in even indices of in_scope_stack. Otherwise, returns false.

========================================================================================================================

== Insert Functions ==

Notes:
FlatHashMap write_list       --> Holds written-to-variables as keys and statement node names they belong to as values
FlatHashMap read_list        --> Holds read-from-variables as keys and statement node names they belong to as values
FlatHashSet output_vars      --> Holds LNAST output-type variable names that are not written to
FlatHashMap perm_write_list  --> Similiar to write_list except static (will not change when scope changes)
FlatHashMap perm_read_list   --> Similiar to read_list except static (will not change when scope changes)

add_to_write_list()
* Parameters: LNAST Class, LNAST Node Name, LNAST Statement Name
* Return value: void
* Adds LNAST Node Name to write_list if not in it and to perm_write_list if not in it.
If LNAST Node Name is a temporary variable (name starts with '____'), throw error message (temporary variables should only be written to once). 
If LNAST Node Name is a output variable (name starts with '%'), calls add_to_output_vars().

add_to_read_list()
* Parameters: LNAST Node Name, LNAST Statement Name
* Return value: void
* Adds LNAST Node Name to read_list if not in it and to perm_read_list if not in it.

add_to_output_vars()
* Parameters: LNAST Node Name
* Return value: void
* Adds LNAST Node Name to output_vars if not in it.

========================================================================================================================

== Error Functions ==

print_out_of_scope_vars()
* Paremeters: LNAST Class
* Return value: void
* Print LNAST AST and an error message ("Out of Scope Variable Error") followed by LNAST variable name(s) that have thrown the error.

error_print_lnast_by_name()
* Parameters: LNAST Class, LNAST Node Name
* Return value: void
* Print LNAST AST and indicates with an arrow the LNAST Node Name that has thrown an error.

error_print_lnast_by_type()
* Parameters: LNAST Class, LNAST Node Name
* Return value: void
* Print LNAST AST and indicates with an arrow the LNAST Node Type that has thrown an error.


error_print_lnast_by_warn()
* Parameters: LNAST Class, vector of LNAST Node Names
* Return value: void
* Print LNAST AST and indicates with an arrow the LNAST Node Names from a vector that have thrown an error or errors.

========================================================================================================================

== Misc. Check Functions ==

resolve_read_write_lists()
* Parameters:
* Return value:

resolve_lhs_rhs_lists()
* Parameters:
* Return value:

resolve_out_of_scope()
* Parameters:
* Return value:

resolve_out_of_scope_func_def():
* Parameters:
* Return value:enguc

========================================================================================================================

== Semantic Check Functions ==

========================================================================================================================

